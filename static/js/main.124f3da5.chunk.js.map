{"version":3,"sources":["modules/bmiCalculator.js","components/DisplayResult.js","components/MethodSelect.js","App.js","serviceWorker.js","index.js"],"names":["setBMIMessage","finalBMI","DisplayResult","weight","height","method","bmi","parseFloat","isNaN","toFixed","BMIMessage","isFinite","concat","bmiCalculation","this","props","react_default","a","createElement","id","calculate","Component","MethodSelect","Fragment","name","onChange","onChangeValue","value","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","methodChange","event","setState","target","state","_this2","className","style","paddingBottom","components_MethodSelect","e","components_DisplayResult","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.124f3da5.chunk.js","sourcesContent":["export const bmiCalculation = (weight, height, method) => {\n  parseFloat(weight); // changes a string into a floating point number\n  parseFloat(height);\n  let bmi;\n\n  weight = isNaN(weight) ? 0 : weight;\n  height = isNaN(height) ? 0 : height;\n\n  if (method === 'metric') {\n    bmi = weight / (height / 100 * height / 100);\n  } else {\n    bmi = weight / (height * height) * 703;\n  }\n\n  let finalBMI = parseFloat(bmi.toFixed(2)); // toFixed specifies the number of decimal places bef/aft '.'\n  let BMIMessage = setBMIMessage(finalBMI)\n  if (isNaN(finalBMI) || !isFinite(finalBMI) || finalBMI === 0) { // isFinite determines whether the passed val is finite\n    return '';\n  } else {\n    return `You are ${BMIMessage} with a BMI of ${finalBMI}`;\n  }\n}\n\nconst setBMIMessage = (finalBMI) => {\n  if (finalBMI < 18.5) {\n    return \"Underweight\";\n  }\n\n  if (finalBMI > 18.5 && finalBMI < 25) {\n    return \"Normal\";\n  }\n\n  if (finalBMI > 25 && finalBMI < 30) {\n    return \"Overweight\";\n  }\n\n  if (finalBMI > 30) {\n    return \"Obese\";\n  }\n}\n","import React, { Component } from \"react\";\nimport { bmiCalculation } from \"../modules/bmiCalculator\";\n\nclass DisplayResult extends Component {\n  calculate() {\n    var weight = this.props.weight;\n    var height = this.props.height;\n    var method = this.props.method;\n\n    return bmiCalculation(weight, height, method);\n  }\n\n  render() {\n    return <div id=\"response\">{this.calculate()}</div>;\n  }\n}\n\nexport default DisplayResult;\n","import React from \"react\";\n\nfunction MethodSelect(props) {\n  return (\n    <>\n      <div>\n      <label>Method</label>\n        <select name=\"method\" id=\"method\" onChange={props.onChangeValue} value={props.method}>\n          <option value=\"metric\">Metric</option>\n          <option value=\"imperial\">Imperial</option>\n        </select>\n      </div>\n    </>\n  );\n}\n\nexport default MethodSelect;\n","import React, { Component } from \"react\";\nimport DisplayResult from \"./components/DisplayResult\";\nimport MethodSelect from \"./components/MethodSelect\";\nimport \"./App.css\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weight: \"\",\n      height: \"\",\n      method: \"metric\",\n    };\n  }\n\n  methodChange = (event) => {\n    this.setState({method: event.target.value})\n  }\n\n  componentDidUpdate\n\n  render() {\n    return (\n      <div className=\"bmiContainer\">\n        <h1>BMI Calculator</h1>\n        <div style={{ paddingBottom: 10 }} >\n          <MethodSelect \n            method={this.state.method}\n            onChangeValue={this.methodChange}\n          />\n        </div>\n\n        <div>\n          <label>Weight{this.state.method === \"metric\" ? \"(kg)\" : \"(lbs)\"}</label>{\"\\n\"}\n          <input\n            name=\"weight\"\n            value={this.state.weight}\n            onChange={e => this.setState({ weight: e.target.value })}\n          />\n        </div>\n\n        <div>\n          <label>Height{this.state.method === \"metric\" ? \"(cm)\" : \"(inches)\"}</label>{\"\\n\"}\n          <input\n            name=\"height\"\n            value={this.state.height}\n            onChange={e => this.setState({ height: e.target.value })}\n          />\n        </div>\n\n        <DisplayResult weight={this.state.weight} height={this.state.height} method={this.state.method} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}